{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///Users/samanthateo/Documents/GitHub/nextjs-dashboard/app/ui/acme-logo.tsx"],"sourcesContent":["import { GlobeAltIcon } from '@heroicons/react/24/outline';\nimport { lusitana } from '@/app/ui/fonts';\n\nexport default function AcmeLogo() {\n  return (\n    <div\n      className={`${lusitana.className} flex flex-row items-center leading-none text-white`}\n    >\n      <GlobeAltIcon className=\"h-12 w-12 rotate-[15deg]\" />\n      <p className=\"text-[44px]\">Acme</p>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AAAA;AADA;;;;AAGe,SAAS;IACtB,qBACE,6WAAC;QACC,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,mDAAmD,CAAC;;0BAErF,6WAAC,8SAAA,CAAA,eAAY;gBAAC,WAAU;;;;;;0BACxB,6WAAC;gBAAE,WAAU;0BAAc;;;;;;;;;;;;AAGjC"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/samanthateo/Documents/GitHub/nextjs-dashboard/app/ui/login-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/login-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/login-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/samanthateo/Documents/GitHub/nextjs-dashboard/app/ui/login-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/login-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/login-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///Users/samanthateo/Documents/GitHub/nextjs-dashboard/app/login/page.tsx"],"sourcesContent":["import AcmeLogo from \"@/app/ui/acme-logo\";\nimport LoginForm from \"@/app/ui/login-form\";\nimport { Suspense } from \"react\";\n\nexport default function LoginPage() {\n    return (\n        <main className=\"flex items-center justify-center md:h-screen\">\n            <div className=\"relative mx-auto flex w-full max-w-[400px] flex-col space-y-2.5 p-4 md:-mt-32\">\n                <div className=\"flex h-20 w-full items-end rounded-lg bg-blue-500 p-3 md:h-36\">\n                    <div className=\"w-32 text-white md:w-36\">\n                        <AcmeLogo />\n                    </div>\n                </div>\n                <Suspense>\n                    <LoginForm />\n                </Suspense>\n            </div>\n        </main>\n    );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,SAAS;IACpB,qBACI,6WAAC;QAAK,WAAU;kBACZ,cAAA,6WAAC;YAAI,WAAU;;8BACX,6WAAC;oBAAI,WAAU;8BACX,cAAA,6WAAC;wBAAI,WAAU;kCACX,cAAA,6WAAC,0HAAA,CAAA,UAAQ;;;;;;;;;;;;;;;8BAGjB,6WAAC,oUAAA,CAAA,WAAQ;8BACL,cAAA,6WAAC,2HAAA,CAAA,UAAS;;;;;;;;;;;;;;;;;;;;;AAK9B"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///Users/samanthateo/Documents/GitHub/nextjs-dashboard/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth'\n\nexport const authConfig = {\n\tpages: {\n\t\tsignIn: '/login',\n\t},\n\tcallbacks: {\n\t\tauthorized({ auth, request: {nextUrl} }) {\n\t\t\tconst isLoggedIn = !!auth?.user\n\t\t\tconst isOnDashboard = nextUrl.pathname.startsWith('/dashboard')\n\n\t\t\tif (isOnDashboard) {\n\t\t\t\tif(isLoggedIn) return true\n\t\t\t\treturn false\n\t\t\t} else if (isLoggedIn) {\n\t\t\t\treturn Response.redirect(new URL('/dashboard', nextUrl))\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\t},\n\tproviders: []\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACzB,OAAO;QACN,QAAQ;IACT;IACA,WAAW;QACV,YAAW,EAAE,IAAI,EAAE,SAAS,EAAC,OAAO,EAAC,EAAE;YACtC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAElD,IAAI,eAAe;gBAClB,IAAG,YAAY,OAAO;gBACtB,OAAO;YACR,OAAO,IAAI,YAAY;gBACtB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YAChD;YACA,OAAO;QACR;IACD;IACA,WAAW,EAAE;AACd"}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/samanthateo/Documents/GitHub/nextjs-dashboard/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authConfig } from \"./auth.config\";\nimport Credentials from 'next-auth/providers/credentials';\nimport { z } from 'zod';\nimport type { User } from \"@/app/lib/definitions\";\nimport bcrypt from \"bcryptjs\";\nimport postgres from \"postgres\";\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' })\nasync function getUser(email:string): Promise<User | undefined> {\n    try {\n        const user = await sql<User[]>`SELECT * FROM users WHERE email=${email}`;\n        return user[0]\n    } catch (error) {\n        console.error(\"Failed to fetch user: \", error)\n        throw new Error('Failed to fetch user.')\n    }\n}\n\nexport const { auth, signIn, signOut } = NextAuth({ \n    ...authConfig, \n    providers: [Credentials({\n        async authorize(credentials) {\n            const parsedCredentials = z.object({\n                email: z.string().email(),\n                password: z.string().min(6)\n            }).safeParse(credentials)\n            if (parsedCredentials.success) {\n                const { email, password } = parsedCredentials.data\n                const user = await getUser(email)\n                if (!user) return null\n                \n                const passwordsMatch = await bcrypt.compare(password, user.password)\n                if (passwordsMatch) return user\n            }\n            console.log(\"Invalid credentials\")\n            return null\n        }\n    })] \n})\n\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAGA;AACA;AANA;AAEA;AACA;;;;;;;AAKA,MAAM,MAAM,CAAA,GAAA,6LAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AACjE,eAAe,QAAQ,KAAY;IAC/B,IAAI;QACA,MAAM,OAAO,MAAM,GAAW,CAAC,gCAAgC,EAAE,MAAM,CAAC;QACxE,OAAO,IAAI,CAAC,EAAE;IAClB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM,IAAI,MAAM;IACpB;AACJ;AAEO,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,wVAAA,CAAA,UAAQ,AAAD,EAAE;IAC9C,GAAG,8GAAA,CAAA,aAAU;IACb,WAAW;QAAC,CAAA,GAAA,sNAAA,CAAA,UAAW,AAAD,EAAE;YACpB,MAAM,WAAU,WAAW;gBACvB,MAAM,oBAAoB,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;oBAC/B,OAAO,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;oBACvB,UAAU,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAC7B,GAAG,SAAS,CAAC;gBACb,IAAI,kBAAkB,OAAO,EAAE;oBAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,kBAAkB,IAAI;oBAClD,MAAM,OAAO,MAAM,QAAQ;oBAC3B,IAAI,CAAC,MAAM,OAAO;oBAElB,MAAM,iBAAiB,MAAM,sLAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBACnE,IAAI,gBAAgB,OAAO;gBAC/B;gBACA,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACX;QACJ;KAAG;AACP"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///Users/samanthateo/Documents/GitHub/nextjs-dashboard/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod'\nimport postgres from 'postgres';\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport { signIn } from '@/auth';\nimport { AuthError } from 'next-auth';\n\n// import { createClient } from '../utils/supabase/client';\n\nconst FormSchema = z.object({\n    id: z.string(),\n    customerId: z.string({\n        invalid_type_error: \"Please select a customer.\"\n    }),\n    amount: z.coerce.number().gt(0, {message: \"Please enter an amount greater than $0\"}),\n    status: z.enum(['pending', 'paid'], {invalid_type_error: \"Please select an invoice status\"}),\n    date: z.string()\n});\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true})\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nexport type State = {\n    errors?: {\n        customerId?:string[]; \n        amount?: string[];\n        status?: string[];\n    };\n    message?: string | null\n}\n\nexport async function createInvoice(prevState:State, formData: FormData) {\n    // const supabase = await createClient()\n    const validatedFields = CreateInvoice.safeParse({\n        customerId: formData.get('customerId'),\n        amount: formData.get('amount'),\n        status: formData.get('status')\n    });\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: \"Missing Fields. Failed to create Invoice.\"\n        }\n    }\n    const { customerId, amount, status } = validatedFields.data\n    const amountInCents = amount * 100;\n    const date = new Date().toISOString().split('T')[0]\n\n    try {\n        await sql `INSERT INTO invoices (customer_id, amount, status, date) VALUES (${customerId}, ${amountInCents}, ${status}, ${date})`;\n    } catch(error) {\n        message: \"Database error: Failed to create invoice.\"\n    }\n    \n    revalidatePath('/dashboard/invoices');\n    redirect('/dashboard/invoices')\n}\n\nexport async function updateInvoice(id: string, prevState:State, formData:FormData) {\n    const validatedFields = UpdateInvoice.safeParse({\n        customerId: formData.get('customerId'),\n        amount: formData.get('amount'),\n        status: formData.get('status')\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: \"Database Error: Failed to update invoice.\"\n        } \n    }\n\n    const { customerId, amount, status } = validatedFields.data\n    const amountInCents = amount * 100\n\n    try {\n        await sql `UPDATE invoices SET customer_id = ${customerId}, amount = ${amountInCents}, status=${status} WHERE id=${id}`\n    } catch(error) {\n        message: 'Database Error: Failed to Update Invoice.'\n    }\n\n    revalidatePath('/dashboard/invoices');\n    redirect('/dashboard/invoices')\n}\n\nexport async function deleteInvoice(id:string) {\n    await sql`DELETE FROM invoices WHERE id=${id}`\n    revalidatePath('/dashboard/invoices');\n}\n\nexport async function authenticate( prevState: string|undefined, formData:FormData) {\n    try {\n        await signIn('credentials', formData)\n    } catch (error) {\n        if (error instanceof AuthError) {\n            switch (error.type) {\n                case 'CredentialsSignin':\n                    return \"Invalid credentials.\"\n                default:\n                    return \"Something went wrong.\"\n            }\n        }\n        throw error\n    }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}